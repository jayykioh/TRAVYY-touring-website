import React, { useEffect, useState, useRef } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { useAuth } from "@/auth/context";
import { CheckCircle2, XCircle, Loader2 } from "lucide-react";

const API_BASE = import.meta.env.VITE_API_URL || "http://localhost:4000";

export default function PaymentCallback() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [status, setStatus] = useState("pending");
  const [message, setMessage] = useState("ƒêang x·ª≠ l√Ω thanh to√°n...");
  const [bookingId, setBookingId] = useState(null);
  const hasProcessed = useRef(false); // ‚¨ÖÔ∏è TH√äM GUARD

  useEffect(() => {
    // ‚¨áÔ∏è CH·ªà CH·∫†Y 1 L·∫¶N
    if (hasProcessed.current) {
      console.log("‚ö†Ô∏è Payment already processed, skipping");
      return;
    }
    hasProcessed.current = true;

    const processPayment = async () => {
      try {
        const token = searchParams.get("token"); // PayPal orderID

        if (!token) {
          throw new Error("Thi·∫øu th√¥ng tin thanh to√°n");
        }

        console.log("üì¶ Capturing payment for orderID:", token);

        // G·ªçi API backend ƒë·ªÉ capture payment
        const response = await fetch(`${API_BASE}/api/paypal/capture`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${user?.token}`,
          },
          credentials: "include",
          body: JSON.stringify({
            orderID: token,
            // ‚¨ÖÔ∏è B·ªé mode, backend l·∫•y t·ª´ session metadata
          }),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || "Thanh to√°n th·∫•t b·∫°i");
        }

        const data = await response.json();

        if (data.success && data.bookingId) {
          setStatus("success");
          setMessage("Thanh to√°n th√†nh c√¥ng!");
          setBookingId(data.bookingId);
        } else {
          throw new Error("Kh√¥ng th·ªÉ ho√†n t·∫•t thanh to√°n");
        }
      } catch (error) {
        console.error("Payment capture error:", error);
        setStatus("error");
        setMessage(error.message || "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh thanh to√°n");
      }
    };

    processPayment();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // ‚¨ÖÔ∏è EMPTY DEPS - ch·ªâ ch·∫°y 1 l·∫ßn khi mount

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="max-w-md w-full bg-white rounded-2xl shadow-xl p-8">
        <div className="text-center">
          {status === "processing" && (
            <>
              <Loader2 className="w-16 h-16 text-blue-500 animate-spin mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-gray-900 mb-2">ƒêang x·ª≠ l√Ω</h2>
              <p className="text-gray-600">{message}</p>
            </>
          )}

          {status === "success" && (
            <>
              <CheckCircle2 className="w-16 h-16 text-green-500 mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-gray-900 mb-2">Thanh to√°n th√†nh c√¥ng!</h2>
              <p className="text-gray-600 mb-4">{message}</p>
              {bookingId && (
                <p className="text-sm text-gray-500 mb-6">M√£ ƒë·∫∑t ch·ªó: {bookingId}</p>
              )}
              <div className="mt-6 space-y-3">
                <button
                  onClick={() => navigate("/profile/booking-history")}
                  className="w-full bg-purple-600 text-white py-3 rounded-lg font-semibold hover:bg-purple-700 transition-colors"
                >
                  Xem v√© c·ªßa t√¥i
                </button>
                <button
                  onClick={() => navigate("/")}
                  className="w-full bg-white border-2 border-gray-300 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors"
                >
                  V·ªÅ trang ch·ªß
                </button>
              </div>
            </>
          )}

          {status === "error" && (
            <>
              <XCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-gray-900 mb-2">Th·∫•t b·∫°i</h2>
              <p className="text-gray-600 mb-6">{message}</p>
              <button
                onClick={() => navigate("/shoppingcarts")}
                className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors"
              >
                Quay l·∫°i gi·ªè h√†ng
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
}
