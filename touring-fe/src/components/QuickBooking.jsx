import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Search, MapPin, Calendar, Users } from "lucide-react";
import { toast } from "react-hot-toast";

const QuickBooking = () => {
  const navigate = useNavigate();

  const [bookingData, setBookingData] = useState({
    destination: "",
    checkIn: "",
    checkOut: "",
    guests: 2,
  });

  const [openDropdown, setOpenDropdown] = useState(null);

  const popularDestinations = [
    "ƒê√† N·∫µng",
    "H·ªôi An",
    "Hu·∫ø",
    "Nha Trang",
    "Ph√∫ Qu·ªëc",
    "Sapa",
  ];

  const handleInputChange = (field, value) => {
    setBookingData((prev) => ({ ...prev, [field]: value }));
  };

  // ==========================
  // üß≠ X·ª≠ l√Ω t√¨m ki·∫øm tour
  // ==========================
  const handleSearch = async () => {
    console.log("üîç Searching with:", bookingData);

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const checkInStr = bookingData.checkIn || "";
    const checkOutStr = bookingData.checkOut || "";

    const checkInDate = checkInStr ? new Date(`${checkInStr}T00:00:00`) : null;
    const checkOutDate = checkOutStr
      ? new Date(`${checkOutStr}T00:00:00`)
      : null;

    // üß© Ki·ªÉm tra h·ª£p l·ªá
    if (!bookingData.destination.trim()) {
      toast.error("Vui l√≤ng ch·ªçn ƒëi·ªÉm ƒë·∫øn.");
      return;
    }

    if (!checkInDate || !checkOutDate) {
      toast.error("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ng√†y kh·ªüi h√†nh v√† ng√†y k·∫øt th√∫c.");
      return;
    }

    if (checkInDate < today) {
      toast.error("Ng√†y kh·ªüi h√†nh kh√¥ng ƒë∆∞·ª£c ·ªü qu√° kh·ª©.");
      return;
    }
    if (checkOutDate < today) {
      toast.error("Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c ·ªü qu√° kh·ª©.");
      return;
    }
    if (checkOutDate < checkInDate) {
      toast.error("Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y kh·ªüi h√†nh.");
      return;
    }

    const selectedLenDays =
      Math.floor((checkOutDate - checkInDate) / (24 * 60 * 60 * 1000)) + 1;

    if (selectedLenDays > 14) {
      toast.error("Kho·∫£ng th·ªùi gian kh√¥ng ƒë∆∞·ª£c qu√° 14 ng√†y.");
      return;
    }

    // ‚úÖ Chu·∫©n h√≥a ng√†y ƒë·ªÉ so s√°nh ƒë√∫ng ISO (lo·∫°i b·ªè timezone)
    const normalizeDate = (val) => {
      if (!val) return "";
      const d = new Date(val);
      return d.toISOString().split("T")[0]; // ‚Üí "2025-10-15"
    };

    const normalizedCheckIn = normalizeDate(checkInStr);

    try {
      let url = "http://localhost:4000/api/tours";
      const keyword = bookingData.destination.trim();
      if (keyword) url += `?search=${encodeURIComponent(keyword)}`;

      const res = await fetch(url);
      const data = await res.json();
      console.log("‚úÖ Data nh·∫≠n t·ª´ API:", data);

      const kw = keyword.toLowerCase();

      const matchedTours = data.filter((tour) => {
        const matchPlace =
          tour.title?.toLowerCase().includes(kw) ||
          tour.description?.toLowerCase().includes(kw);

        if (!matchPlace || !Array.isArray(tour.departures)) return false;

        const openDates = tour.departures
          .filter((dep) => dep.status === "open" && dep.date)
          .map((dep) => new Date(dep.date).toISOString().split("T")[0]);

        console.log("üéØ Tour:", tour.title);
        console.log("üîπ C√°c ng√†y open:", openDates);
        console.log("üîπ User ch·ªçn normalize:", normalizedCheckIn);

        const hasExactDeparture = openDates.some(
          (d) => d.trim() === normalizedCheckIn.trim()
        );

        // ‚ùå B·ªè ph·∫ßn duration ki·ªÉm tra (v√¨ ƒëang l√†m fail tour 1 ng√†y)
        const isMatch = hasExactDeparture;

        console.log("‚úÖ Tour match:", isMatch);
        return isMatch;
      });

      // ‚ùóÔ∏èCh·ªâ hi·ªán toast n·∫øu KH√îNG C√ì tour n√†o match
      if (matchedTours.length === 0) {
        toast.error(
          "‚ö†Ô∏è Ng√†y kh·ªüi h√†nh b·∫°n ch·ªçn kh√¥ng c√≥ trong l·ªãch tr√¨nh tour hi·ªán c√≥."
        );
        return;
      }

      // N·∫øu c√≥ match ‚Üí chuy·ªÉn trang
      const params = new URLSearchParams({
        destination: bookingData.destination || "",
        checkIn: checkInStr,
        checkOut: checkOutStr,
        guests: bookingData.guests.toString(),
        len: selectedLenDays?.toString() || "",
        strict: "1",
      });

      navigate(`/search-filter-results?${params.toString()}`, {
        state: { matchedTours },
      });

      setOpenDropdown(null);
    } catch (error) {
      console.error("‚ùå L·ªói khi t√¨m tour:", error);
      toast.error("ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm tour.");
    }
  };

  const toggleDropdown = (dropdown) => {
    setOpenDropdown(openDropdown === dropdown ? null : dropdown);
  };

  return (
    <section className="relative py-12">
      <div className="max-w-6xl mx-auto px-4">
        {/* Search Bar */}
        <div className="relative bg-white rounded-full shadow-2xl border border-gray-200 p-2 flex items-stretch">
          {/* Destination */}
          <div className="relative flex-1 border-r border-gray-200">
            <button
              onClick={() => toggleDropdown("destination")}
              className="w-full h-full flex items-center gap-3 px-6 py-4 hover:bg-gray-50 rounded-l-full transition-all"
            >
              <MapPin className="w-5 h-5 text-gray-600" />
              <div className="text-left flex-1">
                <div className="text-xs font-medium text-gray-500">
                  ƒêi·ªÉm ƒë·∫øn
                </div>
                <div className="text-sm font-semibold text-gray-900 truncate">
                  {bookingData.destination || "B·∫°n mu·ªën ƒë·∫øn ƒë√¢u?"}
                </div>
              </div>
            </button>

            {/* Dropdown ch·ªçn ƒë·ªãa ƒëi·ªÉm */}
            {openDropdown === "destination" && (
              <div className="absolute top-full left-0 mt-2 w-80 bg-white rounded-2xl shadow-2xl border border-gray-200 p-4 z-50">
                <input
                  type="text"
                  placeholder="T√¨m ki·∫øm ƒëi·ªÉm ƒë·∫øn..."
                  value={bookingData.destination}
                  onChange={(e) =>
                    handleInputChange("destination", e.target.value)
                  }
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl outline-none focus:border-[#02A0AA] focus:ring-[#02A0AA]/30 transition-all"
                  autoFocus
                />
                <div className="mt-3">
                  <div className="text-xs font-semibold text-gray-500 mb-2 px-2">
                    ƒê·ªãa ƒëi·ªÉm ph·ªï bi·∫øn
                  </div>
                  <div className="space-y-1">
                    {popularDestinations.map((dest, index) => (
                      <button
                        key={index}
                        onClick={() => {
                          handleInputChange("destination", dest);
                          setOpenDropdown(null);
                        }}
                        className="w-full text-left px-4 py-2 hover:bg-blue-50 rounded-lg transition-all text-sm font-medium text-gray-700"
                      >
                        {dest}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Date Range */}
          <div className="relative flex-1 border-r border-gray-200">
            <button
              onClick={() => toggleDropdown("dates")}
              className="w-full h-full flex items-center gap-3 px-6 py-4 hover:bg-gray-50 transition-all"
            >
              <Calendar className="w-5 h-5 text-gray-600" />
              <div className="text-left flex-1">
                <div className="text-xs font-medium text-gray-500">Ng√†y</div>
                <div className="text-sm font-semibold text-gray-900">
                  {bookingData.checkIn && bookingData.checkOut
                    ? `${bookingData.checkIn} - ${bookingData.checkOut}`
                    : "Ch·ªçn ng√†y"}
                </div>
              </div>
            </button>

            {openDropdown === "dates" && (
              <div className="absolute top-full left-0 mt-2 w-80 bg-white rounded-2xl shadow-2xl border border-gray-200 p-6 z-50">
                <div className="space-y-4">
                  <div>
                    <label className="block text-xs font-semibold text-gray-500 mb-2">
                      Ng√†y b·∫Øt ƒë·∫ßu
                    </label>
                    <input
                      type="date"
                      value={bookingData.checkIn}
                      onChange={(e) =>
                        handleInputChange("checkIn", e.target.value)
                      }
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl outline-none focus:border-[#02A0AA] transition-all"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-semibold text-gray-500 mb-2">
                      Ng√†y k·∫øt th√∫c
                    </label>
                    <input
                      type="date"
                      value={bookingData.checkOut}
                      onChange={(e) =>
                        handleInputChange("checkOut", e.target.value)
                      }
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl outline-none focus:border-[#02A0AA] transition-all"
                    />
                  </div>
                  <button
                    onClick={() => setOpenDropdown(null)}
                    className="w-full bg-[#02A0AA] hover:bg-[#028e98] text-white font-semibold py-3 rounded-xl transition-all"
                  >
                    X√°c nh·∫≠n
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* Guests */}
          <div className="relative flex-1">
            <button
              onClick={() => toggleDropdown("guests")}
              className="w-full h-full flex items-center gap-3 px-6 py-4 hover:bg-gray-50 transition-all"
            >
              <Users className="w-5 h-5 text-gray-600" />
              <div className="text-left flex-1">
                <div className="text-xs font-medium text-gray-500">
                  S·ªë kh√°ch
                </div>
                <div className="text-sm font-semibold text-gray-900">
                  {bookingData.guests} ng∆∞·ªùi
                </div>
              </div>
            </button>

            {openDropdown === "guests" && (
              <div className="absolute top-full right-0 mt-2 w-80 bg-white rounded-2xl shadow-2xl border border-gray-200 p-6 z-50">
                <div className="space-y-4">
                  <div>
                    <label className="block text-xs font-semibold text-gray-500 mb-3">
                      S·ªë l∆∞·ª£ng kh√°ch
                    </label>
                    <div className="flex items-center justify-between">
                      <button
                        onClick={() =>
                          handleInputChange(
                            "guests",
                            Math.max(1, bookingData.guests - 1)
                          )
                        }
                        className="w-10 h-10 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded-full font-bold text-gray-700 transition-all"
                      >
                        -
                      </button>
                      <span className="text-2xl font-bold text-gray-900">
                        {bookingData.guests}
                      </span>
                      <button
                        onClick={() =>
                          handleInputChange(
                            "guests",
                            Math.min(20, bookingData.guests + 1)
                          )
                        }
                        className="w-10 h-10 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded-full font-bold text-gray-700 transition-all"
                      >
                        +
                      </button>
                    </div>
                  </div>
                  <button
                    onClick={() => setOpenDropdown(null)}
                    className="w-full bg-[#02A0AA] hover:bg-[#028e98] text-white font-semibold py-3 rounded-xl transition-all"
                  >
                    X√°c nh·∫≠n
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* Search Button */}
          <button
            onClick={handleSearch}
            className="bg-[#02A0AA] hover:bg-[#028e98] text-white font-bold px-8 py-4 rounded-full ml-2 transition-all duration-300 transform hover:scale-105 flex items-center justify-center gap-2 shadow-lg"
          >
            <Search className="w-5 h-5" />
            <span>T√¨m</span>
          </button>
        </div>
      </div>

      {openDropdown && (
        <div
          className="fixed inset-0 z-40"
          onClick={() => setOpenDropdown(null)}
        ></div>
      )}
    </section>
  );
};

export default QuickBooking;
