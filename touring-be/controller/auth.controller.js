// controller/auth.controller.js
const bcrypt = require("bcryptjs");
const crypto = require("crypto");
const { z } = require("zod");
const User = require("../models/Users");
const { signAccess, signRefresh, newId } = require("../utils/jwt");
const axios = require("axios");
const { sendMail } = require("../utils/emailService");

const isProd = process.env.NODE_ENV === "production";
const ALLOWED_ROLES = ["Traveler", "TourGuide", "TravelAgency"];

const VN_PHONE = /^(03|05|07|08|09)\d{8}$/;
const USERNAME = /^[\p{L}\p{N}_]{3,20}$/u;


const RegisterSchema = z.object({
  email: z.string().email("Email kh√¥ng h·ª£p l·ªá").transform(v => v.trim().toLowerCase()),
  password: z.string().min(8, "M·∫≠t kh·∫©u t·ªëi thi·ªÉu 8 k√Ω t·ª±"),
  name: z.string().trim().optional().nullable(),
  username: z.string().trim().optional().nullable()
    .transform(v => (v == null ? "" : v.toLowerCase()))
    .refine(v => v === "" || USERNAME.test(v), "Username 3‚Äì20 k√Ω t·ª±; ch·ªâ a-z, 0-9, _"),
  phone: z.string().trim().optional().nullable()
    .transform(v => (v == null ? "" : v))
    .refine(v => v === "" || VN_PHONE.test(v), "S·ªë ƒëi·ªán tho·∫°i VN kh√¥ng h·ª£p l·ªá"),
  role: z.enum(ALLOWED_ROLES).optional().default("Traveler"),
  provinceId: z.string().min(1, "Ch∆∞a ch·ªçn t·ªânh/th√†nh"),
  wardId: z.string().min(1, "Ch∆∞a ch·ªçn ph∆∞·ªùng/x√£"),
  addressLine: z.string().trim().optional().nullable(),
});

const normalizePhone = (p) => {
  if (!p) return "";
  let d = p.replace(/\D/g, "");
  if (d.startsWith("84") && d.length === 11) d = "0" + d.slice(2);
  return d;
};

exports.register = async (req, res) => {
  try {
    const payload = RegisterSchema.parse(req.body);

    const email = payload.email;
    const username = payload.username || "";
    const phone = normalizePhone(payload.phone);
    const role = payload.role || "Traveler";

    // Uniqueness checks
    if (await User.exists({ email })) {
      return res.status(409).json({ error: "EMAIL_TAKEN", field: "email", message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }
    if (username && await User.exists({ username })) {
      return res.status(409).json({ error: "USERNAME_TAKEN", field: "username", message: "Username ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }
    if (phone && await User.exists({ phone })) {
      return res.status(409).json({ error: "PHONE_TAKEN", field: "phone", message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }

    const passwordHash = await bcrypt.hash(payload.password, 10);

    // ‚úÖ L∆ØU ROLE + LOCATION ƒê√öNG PAYLOAD
    const user = await User.create({
      email,
      password: passwordHash,
      name: payload.name || "",
      username: username || undefined,
      phone: phone || undefined, // ƒë·ª´ng l∆∞u "" v√†o field unique
      role,                      // d√πng role ƒë√£ ch·ªçn
      location: {
        provinceId: payload.provinceId,
        wardId: payload.wardId,
        addressLine: payload.addressLine || "",
      },
    });

    // c·∫•p refresh cookie + access token (gi·ªëng Google flow)
    const jti = newId();
    const refresh = signRefresh({ jti, userId: user.id });
    res.cookie("refresh_token", refresh, {
      httpOnly: true,
      secure: isProd,
      sameSite: isProd ? "none" : "lax",
      path: "/api/auth",
      maxAge: 30 * 24 * 60 * 60 * 1000,
    });

    const accessToken = signAccess({ id: user.id, role: user.role });

    return res.status(201).json({
      accessToken,
      user: {
        _id: user.id,
        email: user.email,
        role: user.role,
        name: user.name,
        username: user.username || "",
        phone: user.phone || "",
        location: user.location,
      },
    });
  } catch (e) {
    if (e instanceof z.ZodError) {
      return res.status(400).json({ error: "VALIDATION_ERROR", message: e.errors?.[0]?.message });
    }
    if (e?.code === 11000) {
      if (e?.keyPattern?.email)   return res.status(409).json({ error: "EMAIL_TAKEN", field: "email", message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
      if (e?.keyPattern?.username) return res.status(409).json({ error: "USERNAME_TAKEN", field: "username", message: "Username ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
      if (e?.keyPattern?.phone)   return res.status(409).json({ error: "PHONE_TAKEN", field: "phone", message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }
    console.error(e);
    return res.status(500).json({ error: "REGISTER_FAILED", message: e.message || "Server error" });
  }
};

exports.login = async (req, res) => {
  try {
    const { username, password } = req.body;
    // c·∫ßn l·∫•y field password => ƒë·ª´ng .select("-password") ·ªü query n√†y
    const user = await User.findOne({ username });
    if (!user) return res.status(400).json({ message: "Invalid email or password" });

    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(400).json({ message: "Invalid email or password" });

    // ‚úÖ t·∫°o refresh cookie + access token nh∆∞ c√°c flow kh√°c
    const jti = newId();
    const refresh = signRefresh({ jti, userId: user.id });
    res.cookie("refresh_token", refresh, {
      httpOnly: true,
      secure: isProd,
      sameSite: isProd ? "none" : "lax",
      path: "/api/auth",
      maxAge: 30 * 24 * 60 * 60 * 1000,
    });

    const accessToken = signAccess({ id: user.id, role: user.role || "Traveler" });

    return res.json({
      accessToken,
      user: {
        _id: user.id,
        email: user.email,
        role: user.role,
        name: user.name,
        username: user.username || "",
        phone: user.phone || "",
        location: user.location,
      },
    });
  } catch (err) {
    console.error("LOGIN_ERROR:", err);
    res.status(500).json({ error: "LOGIN_FAILED", message: err.message || "Server error" });
  }
};

/* =========================
   Change Password (ƒê·ªïi m·∫≠t kh·∫©u khi ƒë√£ ƒëƒÉng nh·∫≠p)
   ========================= */
exports.changePassword = async (req, res) => {
  try {
    const userId = req.user?.sub || req.user?._id;
    const { currentPassword, newPassword } = req.body;

    if (!currentPassword || !newPassword) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin m·∫≠t kh·∫©u" });
    }

    if (newPassword.length < 8) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±" });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // ‚úÖ Ki·ªÉm tra xem user c√≥ ƒëƒÉng nh·∫≠p b·∫±ng OAuth kh√¥ng
    if (user.googleId || user.facebookId) {
      return res.status(400).json({ 
        message: "B·∫°n ƒëƒÉng nh·∫≠p b·∫±ng Google/Facebook n√™n kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u. Vui l√≤ng qu·∫£n l√Ω b·∫£o m·∫≠t qua t√†i kho·∫£n Google/Facebook c·ªßa b·∫°n.",
        isOAuthUser: true
      });
    }

    // ‚úÖ Ki·ªÉm tra user c√≥ password kh√¥ng
    if (!user.password) {
      return res.status(400).json({ 
        message: "T√†i kho·∫£n c·ªßa b·∫°n kh√¥ng c√≥ m·∫≠t kh·∫©u. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.",
        isOAuthUser: true
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng" });
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    // G·ª≠i email th√¥ng b√°o
    try {
      await axios.post(`http://localhost:${process.env.PORT || 4000}/api/notify/password-changed`, {
        email: user.email,
        name: user.name,
        ipAddress: req.ip,
        userAgent: req.get('user-agent')
      });
    } catch (emailErr) {
      console.error("Failed to send password change notification:", emailErr.message);
    }

    res.json({ success: true, message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    console.error("CHANGE_PASSWORD_ERROR:", err);
    res.status(500).json({ message: err.message || "Server error" });
  }
};

/* =========================
   Forgot Password (Y√™u c·∫ßu reset m·∫≠t kh·∫©u - g·ª≠i email)
   ========================= */
exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ message: "Email l√† b·∫Øt bu·ªôc" });
    }

    const user = await User.findOne({ email: email.toLowerCase() });
    if (!user) {
      // Kh√¥ng ti·∫øt l·ªô email c√≥ t·ªìn t·∫°i hay kh√¥ng (security)
      console.log(`‚ö†Ô∏è Forgot password request for non-existent email: ${email}`);
      return res.json({ 
        success: true, 
        message: "N·∫øu email t·ªìn t·∫°i, link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i" 
      });
    }

    console.log(`üîë Forgot password request for: ${user.email}`);

    // T·∫°o reset token
    const resetToken = crypto.randomBytes(32).toString('hex');
    const hashedToken = crypto.createHash('sha256').update(resetToken).digest('hex');

    user.resetPasswordToken = hashedToken;
    user.resetPasswordExpires = Date.now() + 15 * 60 * 1000; // 15 ph√∫t
    await user.save();

    // T·∫°o reset link
    const resetLink = `${process.env.FRONTEND_URL || 'http://localhost:5173'}/reset-password?token=${resetToken}`;

    console.log(`üìß Sending reset email to: ${user.email}`);
    console.log(`üîó Reset link: ${resetLink}`);

    // G·ª≠i email tr·ª±c ti·∫øp
    try {
      const htmlContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6; background: #f9fafb; padding: 20px; border-radius: 12px; color: #333;">
        <div style="text-align: center;">
          <img src="https://res.cloudinary.com/dzyq1kp4u/image/upload/v1759849958/logo_wvrds5.png" 
               alt="Travyy Banner" 
               style="max-width: 50%; border-radius: 12px; margin-bottom: 20px;" />
        </div>

        <h2 style="color: #2563eb;">üîë ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
        <p>Xin ch√†o <b>${user.name || 'b·∫°n'}</b>,</p>
        <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Travyy c·ªßa b·∫°n.</p>
        
        <div style="text-align: center; margin: 30px 0;">
          <a href="${resetLink}" 
             style="display: inline-block; padding: 14px 28px; background: #2563eb; color: #fff; 
                    font-weight: bold; text-decoration: none; border-radius: 8px; font-size: 16px;">
            üîì ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
          </a>
        </div>

        <div style="background: #fff; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #f59e0b;">
          <p style="margin: 0;"><strong>‚è∞ Link c√≥ hi·ªáu l·ª±c trong 15 ph√∫t</strong></p>
          <p style="margin: 10px 0 0 0; font-size: 14px; color: #666;">N·∫øu link h·∫øt h·∫°n, vui l√≤ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.</p>
        </div>

        <div style="background: #fef2f2; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <p style="margin: 0; color: #dc2626;"><strong>‚ö†Ô∏è Kh√¥ng ph·∫£i b·∫°n?</strong></p>
          <p style="margin: 10px 0 0 0;">N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y. M·∫≠t kh·∫©u c·ªßa b·∫°n s·∫Ω kh√¥ng thay ƒë·ªïi.</p>
        </div>

        <p style="font-size: 14px; color: #666; text-align: center; margin-top: 30px;">
          üîê Travyy lu√¥n b·∫£o v·ªá an to√†n cho t√†i kho·∫£n c·ªßa b·∫°n.
        </p>
      </div>
      `;

      await sendMail(
        user.email,
        "üîë Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - Travyy",
        htmlContent
      );
      
      console.log(`‚úÖ Password reset email sent successfully to: ${user.email}`);
    } catch (emailErr) {
      console.error("‚ùå Failed to send password reset email:", emailErr.message);
      console.error("‚ùå Full error:", emailErr);
      user.resetPasswordToken = undefined;
      user.resetPasswordExpires = undefined;
      await user.save();
      return res.status(500).json({ message: "Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau" });
    }

    res.json({ 
      success: true, 
      message: "Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n" 
    });
  } catch (err) {
    console.error("FORGOT_PASSWORD_ERROR:", err);
    res.status(500).json({ message: err.message || "Server error" });
  }
};

/* =========================
   Reset Password (ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi v·ªõi token)
   ========================= */
exports.resetPassword = async (req, res) => {
  try {
    const { token, newPassword } = req.body;

    if (!token || !newPassword) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin" });
    }

    if (newPassword.length < 8) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±" });
    }

    // Hash token ƒë·ªÉ so s√°nh
    const hashedToken = crypto.createHash('sha256').update(token).digest('hex');

    const user = await User.findOne({
      resetPasswordToken: hashedToken,
      resetPasswordExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({ message: "Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;
    await user.save();

    // G·ª≠i email x√°c nh·∫≠n th√†nh c√¥ng
    try {
      const subject = "‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng - Travyy";
      const htmlContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6; background: #f9fafb; padding: 20px; border-radius: 12px; color: #333;">
        <div style="text-align: center;">
          <img src="https://res.cloudinary.com/dzyq1kp4u/image/upload/v1759849958/logo_wvrds5.png" 
               alt="Travyy Banner" 
               style="max-width: 50%; border-radius: 12px; margin-bottom: 20px;" />
        </div>

        <h2 style="color: #16a34a;">‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng</h2>
        <p>Xin ch√†o <b>${user.name || 'b·∫°n'}</b>,</p>
        <p>M·∫≠t kh·∫©u t√†i kho·∫£n Travyy c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng.</p>
        
        <div style="background: #fff; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #16a34a;">
          <p><strong>‚è∞ Th·ªùi gian:</strong> ${new Date().toLocaleString('vi-VN')}</p>
          <p><strong>üåê IP:</strong> ${req.ip || 'N/A'}</p>
          <p><strong>üíª Thi·∫øt b·ªã:</strong> ${req.get('user-agent') || 'N/A'}</p>
        </div>

        <div style="text-align: center; margin: 30px 0;">
          <a href="http://localhost:5173/login" 
             style="display: inline-block; padding: 14px 28px; background: #16a34a; color: #fff; 
                    font-weight: bold; text-decoration: none; border-radius: 8px; font-size: 16px;">
            üîê ƒêƒÉng nh·∫≠p ngay
          </a>
        </div>

        <div style="background: #fef2f2; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <p style="margin: 0; color: #dc2626;"><strong>‚ö†Ô∏è Kh√¥ng ph·∫£i b·∫°n?</strong></p>
          <p style="margin: 10px 0 0 0;">N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán thay ƒë·ªïi n√†y, vui l√≤ng li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i.</p>
        </div>

        <p style="font-size: 14px; color: #666; text-align: center; margin-top: 30px;">
          üîê Travyy lu√¥n b·∫£o v·ªá an to√†n cho t√†i kho·∫£n c·ªßa b·∫°n.
        </p>
      </div>
      `;

      await sendMail(user.email, subject, htmlContent);
      console.log(`‚úÖ Password reset success email sent to: ${user.email}`);
    } catch (emailErr) {
      console.error("‚ùå Failed to send password reset success email:", emailErr.message);
      // Kh√¥ng block response v√¨ password ƒë√£ ƒë∆∞·ª£c reset th√†nh c√¥ng
    }

    res.json({ 
      success: true, 
      message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù" 
    });
  } catch (err) {
    console.error("RESET_PASSWORD_ERROR:", err);
    res.status(500).json({ message: err.message || "Server error" });
  }
};
